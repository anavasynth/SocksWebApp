from flask import Flask, render_template, request, jsonify, redirect, url_for
import gspread
import os
import json
import base64
import hashlib
from dotenv import load_dotenv
from oauth2client.service_account import ServiceAccountCredentials
from flask_cors import CORS
import logging
import requests

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(level=logging.INFO)

# –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
load_dotenv()

app = Flask(__name__)
CORS(app)

# –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets
scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/drive"]
creds_path = os.getenv("GOOGLE_CREDENTIALS_PATH")
creds = ServiceAccountCredentials.from_json_keyfile_name(creds_path, scope)
client = gspread.authorize(creds)

# –í—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ç–∞–±–ª–∏—Ü—ñ (–∑–∞–º—ñ–Ω–∏ "SHEET_ID" –Ω–∞ —Å–≤—ñ–π)
SHEET_ID = os.getenv("SHEET_ID")
sheet = client.open_by_key(SHEET_ID).sheet1

# LiqPay –∫–ª—é—á—ñ
LIQPAY_PUBLIC_KEY = os.getenv("LIQPAY_PUBLIC_KEY")
LIQPAY_PRIVATE_KEY = os.getenv("LIQPAY_PRIVATE_KEY")

TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/admin")
def admin():
    return render_template("admin.html")


def send_telegram_message(chat_id, message):
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        "chat_id": chat_id,
        "text": message,
        "parse_mode": "Markdown"
    }
    response = requests.post(url, json=payload)
    return response.json()

@app.route('/submit', methods=['POST'])
def submit():
    data = request.json

    name = data.get("name")
    surname = data.get("surname")
    phone = data.get("phone")
    address = data.get("address")
    chat_id = data.get("chat_id")

    amount = 100  # –§—ñ–∫—Å–æ–≤–∞–Ω–∞ —Å—É–º–∞ (–º–æ–∂–Ω–∞ –∑–º—ñ–Ω—é–≤–∞—Ç–∏ –¥–∏–Ω–∞–º—ñ—á–Ω–æ)

    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤ –¥–ª—è LiqPay
    params = {
        "version": "3",
        "public_key": LIQPAY_PUBLIC_KEY,
        "action": "pay",
        "amount": str(amount),
        "currency": "UAH",
        "description": f"–û–ø–ª–∞—Ç–∞ –∑–∞ —Ç–æ–≤–∞—Ä: {name} {surname}, {phone}, {address}",
        "order_id": f"order_{phone}",
        "sandbox": 0  # 0 –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂—É
    }

    # –ö–æ–¥—É–≤–∞–Ω–Ω—è —É Base64
    data_str = base64.b64encode(json.dumps(params).encode()).decode()
    signature_str = base64.b64encode(
        hashlib.sha1((LIQPAY_PRIVATE_KEY + data_str + LIQPAY_PRIVATE_KEY).encode()).digest()
    ).decode()

    return jsonify({
        "message": "–î–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ! –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –Ω–∞ –æ–ø–ª–∞—Ç—É...",
        "data": data_str,
        "signature": signature_str,
        "name": name,
        "surname": surname,
        "phone": phone,
        "address": address,
        "chat_id": chat_id
    }), 200

@app.route('/payment_callback', methods=['POST'])
def payment_callback():
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ JSON-–¥–∞–Ω—ñ –∑ –∑–∞–ø–∏—Ç—É
        data = request.get_json().get('data')
        signature = request.get_json().get('signature')
        status = request.get_json().get('status')
        name = request.get_json().get('name')
        surname = request.get_json().get('surname')
        phone = request.get_json().get('phone')
        address = request.get_json().get('address')
        print(status)
        print(name, surname, phone, address)

        if not data or not signature:
            logging.error("–ù–µ–º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–∏—Ö –¥–∞–Ω–∏—Ö –∞–±–æ –ø—ñ–¥–ø–∏—Å—É –≤ –∑–∞–ø–∏—Ç—ñ.")
            return jsonify({"error": "Missing data or signature"}), 400

        logging.info(f"–û—Ç—Ä–∏–º–∞–Ω–æ callback: data={data}, signature={signature}")

        # –ü–µ—Ä–µ—Ä–∞—Ö—É–Ω–æ–∫ –ø—ñ–¥–ø–∏—Å—É
        calculated_signature = base64.b64encode(
            hashlib.sha1((LIQPAY_PRIVATE_KEY + data + LIQPAY_PRIVATE_KEY).encode()).digest()
        ).decode()

        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø—ñ–¥–ø–∏—Å –∑–±—ñ–≥–∞—î—Ç—å—Å—è
        if signature != calculated_signature:
            logging.error("–ù–µ–≤—ñ—Ä–Ω–∏–π –ø—ñ–¥–ø–∏—Å –ø–ª–∞—Ç–µ–∂—É!")
            return jsonify({"error": "Invalid signature"}), 400

        # –î–µ–∫–æ–¥—É—î–º–æ JSON-–¥–∞–Ω—ñ
        decoded_data = json.loads(base64.b64decode(data).decode())
        print(decoded_data)
    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å –æ–±—Ä–æ–±–∫–∏ –∑–∞–ø–∏—Ç—É: {e}")
        return jsonify({"error": "Invalid request format"}), 400

    #status = decoded_data.get('status')
    order_id = decoded_data.get('order_id')
    amount = decoded_data.get('amount')
    description = decoded_data.get('description')

    logging.info(f"–°—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂—É: {status}, Order ID: {order_id}, –°—É–º–∞: {amount}, –û–ø–∏—Å: {description}")

    # –Ø–∫—â–æ —Å—Ç–∞—Ç—É—Å —É—Å–ø—ñ—à–Ω–∏–π, –∑–∞–ø–∏—Å—É—î–º–æ —É —Ç–∞–±–ª–∏—Ü—é
    if status == 'success':
        sheet.append_row([name, surname, phone, address, amount, status])
        logging.info("–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—é")
        chat_id = request.get_json().get('chat_id')
        print("chat_id:", chat_id)
        if chat_id:
            message = "üéâ –î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è! –û–ø–ª–∞—Ç–∞ –ø—Ä–æ–π—à–ª–∞ —É—Å–ø—ñ—à–Ω–æ. –û—á—ñ–∫—É–π—Ç–µ –¥–æ—Å—Ç–∞–≤–∫—É. üöÄ"
            send_telegram_message(chat_id , message)
        return jsonify({"message": "–ü–ª–∞—Ç—ñ–∂ —É—Å–ø—ñ—à–Ω–∏–π, –¥–∞–Ω—ñ –∑–∞–ø–∏—Å–∞–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—é."}), 200

    return jsonify({"message": "–ü–ª–∞—Ç—ñ–∂ –Ω–µ —É—Å–ø—ñ—à–Ω–∏–π."}), 400



if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)
